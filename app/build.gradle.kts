/*
 * This file was generated by the Gradle 'init' task.
 *
 * This generated file contains a sample Kotlin application project to get you started.
 * For more details take a look at the 'Building Java & JVM projects' chapter in the Gradle
 * User Manual available at https://docs.gradle.org/7.5.1/userguide/building_java_projects.html
 */

import net.pwall.json.kotlin.codegen.gradle.JSONSchemaCodegen

plugins {
    // Apply the org.jetbrains.kotlin.jvm Plugin to add support for Kotlin.
    id("org.jetbrains.kotlin.jvm") version "1.6.21"

//    id("net.pwall.json.json-kotlin-gradle") version "0.82"

    kotlin("plugin.serialization") version "1.4.20"

    // Apply the application plugin to add support for building a CLI application in Java.
    application
}

repositories {
    // Use Maven Central for resolving dependencies.
    mavenCentral()
}

dependencies {
    implementation("net.pwall.json:json-kotlin-gradle:0.81")

    // Align versions of all Kotlin components
    implementation(platform("org.jetbrains.kotlin:kotlin-bom"))

    // Use the Kotlin JDK 8 standard library.
    implementation("org.jetbrains.kotlin:kotlin-stdlib-jdk8")

    // This dependency is used by the application.
    implementation("com.google.guava:guava:31.0.1-jre")

    // YAML Parser
    implementation("com.charleskorn.kaml:kaml:0.48.0")
    implementation("net.pwall.json:json-kotlin-gradle:0.82")
    implementation("net.pwall.json:json-kotlin-schema-codegen:0.82")

    // Use the Kotlin test library.
    testImplementation("org.jetbrains.kotlin:kotlin-test")

    // Use the Kotlin JUnit integration.
    testImplementation("org.jetbrains.kotlin:kotlin-test-junit")
    implementation(kotlin("script-runtime"))
}

application {
    // Define the main class for the application.
    mainClass.set("kt.gitpod.parser.AppKt")
}

sourceSets.main {
    java.srcDirs("build/generated-sources/kotlin")
}

configure<JSONSchemaCodegen> {
}
//apply<JSONSchemaCodegenPlugin>()

//task("generate-gitpod-config-class") {
//    doLast {
//        println("helloworld")
//        val codeGenerator = CodeGenerator()
//        codeGenerator.baseDirectoryName = "/workspace/kt-gitpod-parser/app/src/main/kotlin"
//        codeGenerator.basePackageName = "kt.gitpod.parser"
//        codeGenerator.generate(File("/workspace/kt-gitpod-parser/gitpod-schema.json"))
//    }
//}